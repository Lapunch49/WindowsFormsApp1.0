Лабораторная работа 1. «Кнопки и Формы»
Тип приложения: GUI, desktop; язык: без ограничений.
Создание простейшего desktop-приложения с графическим интерфейсом пользователя (GUI) в любой среде (Visual Studio - Windows Forms Application или WPF; C++ Builder - VCL Application; С++ и Qt Framework и т.д.).

•	Создание простейшего приложения с GUI
	o	форма
	o	меню, пункты меню
	o	добавлять на форму разнообразные стандартные объекты и изучать их свойства, влияющие на внешний вид и поведение 
•	Управление простейшими событиями (при происходящих событиях должна появляться какая-либо реакция приложения, позволяющая понять, что событие произошло)
	o	нажатие мыши, перемещение мыши
	o	выбор пункта меню
	o	нажатие клавиши
	o	перерисовка (как и для чего использовать событие Paint)
	o	таймер
	o	изменение размера окна
•	Управление событиями, влияние объектов друг на друга (при каком-либо событии, связанным с одним объектом, должно что-то меняться в другом объекте).
•	Управление событиями и обработчиками событий: один обработчик на несколько событий разных объектов (например, три различные кнопки, один обработчик,  нажатая кнопка меняет цвет), программный вызов обработчиков (вызов метода-обработчика в программе), программный вызов событий (вызов методов типа PerformClick).
•	Управление свойствами объектов в design time и в runtime: выделить два главных свойства каждого объекта и научиться изменять их как до запуска программы, так и во время работы приложения.
•	Изучить (знать, для каких целей используются и как работают) все стандартные элементы управления:
	o	В случае Visual Studio - Windows Forms Application: все компоненты с закладок «Стандартные элементы управления», «Контейнеры», плюс меню и таймер.
	o	В случае C++ Builder - VCL Application: все компоненты с закладок «Standard», «Additional», «Win32», «System».
	o	В остальных случаях – аналогичный набор основных компонент
•	Для всех стандартных компонентов из предыдущего пункта необходимо понять их назначение (для чего используется чаще всего), и выделить основное свойство (одно или два) или основной метод (например, для текстового поля ввода – свойство, хранящее текст, для выпадающего списка – список элементов и номер выбранного и т.д.). Необходимо у каждого типового компонента выделить его главные свойства (одно-два) и научиться манипулировать ими до запуска программы и во время её работы.
•	Динамическое создание и уничтожение объектов интерфейса:
	o	создание элементов интерфейса как реакция на события: при нажатии мышкой на любое место на форме, должен создаваться объект любого типового класса (например, кнопка). Элемент обязательно должен иметь обработчик события (например, если создаются кнопки, то при нажатии на них должна появляться реакция)

В рамках лабораторной работы необходимо разобраться:
•	чем отличаются классы от объектов;
•	каким образом создается интерфейс приложения из стандартных объектов;
•	каким образом изменяются до и после запуска программы свойства объектов;
•	каким образом одни объекты вызывают методы других объектов;
•	в каких случаях срабатывают какие события из стандартного списка.

Разработанное простейшее приложение должно содержать как можно больше (не меньше 15) разных (разнотипных, то есть не 15 кнопок!) взаимодействующих компонент. Необходимо уметь незамедлительно вносить необходимые изменения в программу по заданиям преподавателя вида: «При наведении мыши на такой-то объект должно происходить то-то и то-то с другим объектом».

Самые главные элементы, на которые необходимо обратить внимание и их свойства и события: кнопка (текст, нажатие), текстовое поле (текст, изменение текста), выпадающий список (текст, список элементов, номер выбранного списка, изменение выбранного элемента), статический текст (текст), чекбокс (текст, признак выбранности, изменение выбранности), радио-кнопка (текст, признак выбранности, изменение выбранности), панель (размеры), разделитель (привязка), список выбора (элементы, изменение выбранных элементов), закладки (активная закладка, переключение закладок) и т.д.

Главное в первой лабораторной - научиться технологии создания GUI-приложений, а для этого приложение должно быть максимально разнообразным, и наличие смысла в приложении – вторично и даже вредно. Грубо говоря, программа вообще может ничего полезного не делать, но лишь бы там было больше 15 (в идеале - как можно больше) разнообразных (разнотипных, разноклассовых) компонент и как можно более разнообразные события и варианты взаимодействий.

Материалы: https://www.youtube.com/watch?v=BEmQpbVHjwg 
